@page "/Create"
@inject ILogger<CreateFormPage> Logger
@inject IFormsService FormsService
@inject NavigationManager NavigationManager
@implements IDisposable

<EditForm class="h-full flex flex-col md:flex-row"
          FormName="create_form"
          EditContext="_editContext"
          OnValidSubmit="SendCreateForm">
    <FluentValidationValidator/>

    <div class="flex flex-col h-min md:h-full w-full md:w-1/4 md:pr-4 mt-6 border-solid">
        <TextEntry Id="form_title"
                   Label="Form Title"
                   @bind-Value="CreateForm!.Title"
                   ValidationFor="@(() => CreateForm.Title)"/>
        <TextEntry Class="mt-6"
                   Id="form_subtitle"
                   Label="Form Subtitle"
                   @bind-Value="CreateForm!.Subtitle"
                   ValidationFor="@(() => CreateForm.Subtitle)"/>
        <TextEntry Class="mt-6"
                   Id="form_pass"
                   Label="Results password"
                   @bind-Value="CreateForm!.Password"
                   ValidationFor="@(() => CreateForm.Password)"
                   Type="password"/>

        <button class="block border-b-2 border-slate-400 p-2 my-4 focus:ring-0
                       hover:bg-slate-950 hover:dark:bg-slate-100 hover:border-slate-50
                       hover:dark:border-slate-950 hover:dark:text-zinc-950 hover:text-zinc-100">
            Publish
        </button>
    </div>

    <div class="flex flex-col md:pl-4 w-full">
        <div class="mb-6">
            <div class="flex flex-row items-end justify-between">
                <h2 class="block text-xl md:text-3xl w-fit h-fit border-solid border-b-2 border-slate-400">
                    Form elements
                </h2>
                <div class="relative flex flex-row items-center mx-2 border-solid border-b-2 border-slate-400 p-2 focus:ring-0
                            hover:bg-slate-950 hover:dark:bg-slate-100 hover:border-slate-50
                            hover:dark:border-slate-950 hover:dark:text-zinc-950 hover:text-zinc-100"
                     @onmouseenter="OpenDropDown"
                     @onmouseleave="CloseDropDown">
                    <div class="mr-1">
                        Add element
                    </div>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5"/>
                    </svg>
                    <button type="button"
                            class="absolute top-10 left-0 @DropDownVisibility p-2 w-full
                                   text-zinc-100 dark:text-zinc-950 no-underline hover:underline
                                   bg-slate-950 hover:bg-slate-950 dark:bg-slate-100 hover:dark:bg-slate-100"
                            @onclick=@(AddNewElement<StringElementModel>)>
                        Text element
                    </button>
                    <button type="button"
                            class="absolute top-[4.5rem] left-0 @DropDownVisibility p-2 w-full
                                   text-zinc-100 dark:text-zinc-950 hover:underline
                                   bg-slate-950 hover:bg-slate-950 dark:bg-slate-100 hover:dark:bg-slate-100"
                            @onclick=@(AddNewElement<MultiChoiceElementModel>)>
                        Multi-choice element
                    </button>
                </div>
            </div>
            <ValidationMessage For="@(() => CreateForm.ElementModels)"></ValidationMessage>
        </div>

        @for (var i = 0; i < CreateForm.ElementModels.Count; i++)
        {
            <ElementEditor @bind-Value="CreateForm.ElementModels[i]"/>
        }
    </div>
</EditForm>

@code {
    private bool _dropDownVisible = false;
    private string? DropDownVisibility => _dropDownVisible ? null : "hidden";

    private EditContext _editContext = default!;

    public FormModel CreateForm { get; set; } = new();

    private async Task SendCreateForm()
    {
        try
        {
            var id = await FormsService.CreateForm(CreateForm);
            NavigationManager.NavigateTo($"/form/{id}");
        }
        catch (Exception ex)
        {
            // todo extract to logger method
            Logger.LogError(new(1, "uncaught-ex-create-form"), ex, "Unexpected exception occurred during form creation");
        }
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(CreateForm);
        _editContext.SetFieldCssClassProvider(new TailwindCssClassProvider());
        CreateForm.ElementDeleted += ElementDeletedCallback;
    }

    private void AddNewElement<TElement>()
        where TElement : ElementModel
    {
        var elem = (TElement)Activator.CreateInstance(typeof(TElement), CreateForm)!;
        CreateForm.ElementModels.Add(elem);
        StateHasChanged();
    }

    private void OpenDropDown(MouseEventArgs e)
    {
        _dropDownVisible = true;
        StateHasChanged();
    }

    private void CloseDropDown(MouseEventArgs e)
    {
        _dropDownVisible = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        CreateForm.ElementDeleted -= ElementDeletedCallback;
    }

    private void ElementDeletedCallback() => StateHasChanged();
}
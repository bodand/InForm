@using InForm.Server.Core.Features.Fill

@page "/form/{Id:guid}/responses"
@inject IFillService FillService

<div class="mx-2">
    @if (!Response.HasValue)
    {
        <EditForm EditContext="_editContext"
                  OnSubmit="@(TryLoadElements)">
            <div class="mt-32 flex flex-col w-fit mx-auto">
                @switch (_state)
                {
                    case PageState.Loading:
                        <div class="text-lg m-4 mb-8">Loading</div>
                        break;

                    case PageState.MissingPassword:
                        <div class="text-lg m-4 mb-8">This form is not public.</div>

                        <TextEntry Id="resp_pass"
                                   Label="Password"
                                   Type="password"
                                   @bind-Value=_password />

                        <button class="block border-b-2 border-slate-400 p-2 my-4 focus:ring-0
                                       hover:bg-slate-950 hover:dark:bg-slate-100 hover:border-slate-50
                                       hover:dark:border-slate-950 hover:dark:text-zinc-950 hover:text-zinc-100">
                            Open
                        </button>

                        break;

                    case PageState.BadPassword:
                        <div class="text-lg m-4 mb-8">Incorrect password.</div>

                        <TextEntry Id="resp_pass"
                                   Label="Password"
                                   Type="password"
                                   @bind-Value=_password />
                        <button class="block border-b-2 border-slate-400 p-2 my-4 focus:ring-0
                                       hover:bg-slate-950 hover:dark:bg-slate-100 hover:border-slate-50
                                       hover:dark:border-slate-950 hover:dark:text-zinc-950 hover:text-zinc-100">
                            Open
                        </button>

                        break;
                }
            </div>
        </EditForm>
    }
    else
    {
        <h2 class="fixed text-5xl break-words"
            title="@Response.Value.Title">
            @Response.Value.Title
        </h2>
        <h3 class="fixed text-wrap mt-11 text-2xl text-zinc-700 dark:text-zinc-300 break-words"
            title="@Response.Value.Subtitle">
            @Response.Value.Subtitle
        </h3>

        <div class="mt-32 flex flex-col w-fit mx-auto">
            @foreach (var elementResponse in Response.Value.Responses)
            {
                <ResponseBase ElementResponse="@elementResponse" />
            }
        </div>
    }
</div>


@code {
    enum PageState
    {
        Loading,
        MissingPassword,
        BadPassword
    }

    private PageState _state = PageState.Loading;

    private EditContext _editContext = default!;

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public RetrieveFillsResponse? Response { get; set; }

    private string? _password;

    protected override void OnInitialized()
    {
        _editContext = new(new { });
    }

    protected override async Task OnInitializedAsync()
    {
        await TryLoadElements();
    }

    private async Task TryLoadElements()
    {
        try
        {
            Response = await FillService.GetResponses(Id, _password);
        }
        catch (UnauthorizedAccessException)
        {
            if (_state == PageState.Loading) _state = PageState.MissingPassword;
            else _state = PageState.BadPassword;
        }

    }
}
